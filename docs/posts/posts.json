[
  {
    "path": "posts/12_1/",
    "title": "Bayesian inference and consolidation of statistics",
    "description": "\"With an excursion into the whens and when nots of mediation\"",
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      }
    ],
    "date": "2021-05-25",
    "categories": [],
    "contents": "\n\nContents\n\n\n\n\n\nUncertainty\nFuture Horizons\n\n\n\n",
    "preview": "posts/12_1/distill-preview.png",
    "last_modified": "2021-02-23T15:07:02+13:00",
    "input_file": {},
    "preview_width": 1023,
    "preview_height": 876
  },
  {
    "path": "posts/11_1/",
    "title": "Missing data and measurement error",
    "description": "\"With an excursion into the whens and when nots of mediation\"",
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      }
    ],
    "date": "2021-05-18",
    "categories": [],
    "contents": "\n\nContents\n\n\n\n\n\nRemember: parameters are not observed\nMeasurement error\nMissing eata\n\n\n\n",
    "preview": "posts/11_1/distill-preview.png",
    "last_modified": "2021-02-23T15:06:35+13:00",
    "input_file": {},
    "preview_width": 1106,
    "preview_height": 553
  },
  {
    "path": "posts/10_1/",
    "title": "Longitudinal data: within and between-individual effects",
    "description": {},
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      }
    ],
    "date": "2021-05-11",
    "categories": [],
    "contents": "\n\nContents\nLongitudional data and the multi-level model\nMediation from the vantage point of causal inference (when and when not)\n\nLongitudional data and the multi-level model\n\n\n\nMediation from the vantage point of causal inference (when and when not)\n\n\n\n",
    "preview": "posts/10_1/op2.png",
    "last_modified": "2021-02-23T15:06:10+13:00",
    "input_file": {},
    "preview_width": 1800,
    "preview_height": 600
  },
  {
    "path": "posts/9_1/",
    "title": "Introduction to multilevel models: group-level slopes",
    "description": {},
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      }
    ],
    "date": "2021-05-04",
    "categories": [],
    "contents": "\n\nContents\nCovariance\n\nCovariance\n\n\n\n\n\n\n",
    "preview": "posts/9_1/op.png",
    "last_modified": "2021-02-23T15:05:58+13:00",
    "input_file": {},
    "preview_width": 1920,
    "preview_height": 1536
  },
  {
    "path": "posts/8_1/",
    "title": "Introduction to multilevel models: group-level intercepts",
    "description": {},
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      }
    ],
    "date": "2021-04-27",
    "categories": [],
    "contents": "\n\nContents\nPartial pooling\nRandom intercepts\n\nPartial pooling\nRandom intercepts\n\n\n\n\n\n\n",
    "preview": "posts/8_1/op2.png",
    "last_modified": "2021-02-23T15:05:36+13:00",
    "input_file": {},
    "preview_width": 2304,
    "preview_height": 1536
  },
  {
    "path": "posts/7_1/",
    "title": "Modelling binary, count data, and ordinal data",
    "description": {},
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      }
    ],
    "date": "2021-04-20",
    "categories": [],
    "contents": "\n\nContents\nBinary Data\nCount data\nZero infalted data\nOrdinal data\n\nBinary Data\nCount data\nZero infalted data\nOrdinal data\n\n\n\n\n\n\n",
    "preview": "posts/7_1/op.png",
    "last_modified": "2021-02-23T15:05:19+13:00",
    "input_file": {},
    "preview_width": 1000,
    "preview_height": 1000
  },
  {
    "path": "posts/6_1/",
    "title": "An introduction to directed acyclic graphs ",
    "description": "\"Control is killing your model\"",
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      }
    ],
    "date": "2021-03-30",
    "categories": [],
    "contents": "\n\nContents\nWhat is causal confounding?\nThe difference between prediction and explanation?\n\nWhat is causal confounding?\n\n\n\nThe difference between prediction and explanation?\n\n\n\n",
    "preview": "posts/6_1/op2.png",
    "last_modified": "2021-02-23T15:05:04+13:00",
    "input_file": {},
    "preview_width": 1200,
    "preview_height": 800
  },
  {
    "path": "posts/4_1/",
    "title": "Consolidation of skills",
    "description": {},
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      },
      {
        "name": "Johannes Karl",
        "url": "https://johannes-karl.com"
      }
    ],
    "date": "2021-03-16",
    "categories": [],
    "contents": "\n\nContents\nReview\n\nReview\n\n\n\n\n\n\n",
    "preview": "posts/4_1/op.png",
    "last_modified": "2021-02-23T00:39:33+13:00",
    "input_file": {},
    "preview_width": 10241,
    "preview_height": 8450
  },
  {
    "path": "posts/3_1/",
    "title": "Visualisation",
    "description": {},
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      },
      {
        "name": "Johannes Karl",
        "url": "https://johannes-karl.com"
      }
    ],
    "date": "2021-03-09",
    "categories": [],
    "contents": "\n\nContents\nData visualisation with ggplot2\nIntroduction\nCreating a graph\nUsing ggplot 2 to highlight elements of interest.\nFacets\nUnderstanding your data through graphs\nTransforming data\nRevisiting logical operators\nCommand filter: keeps rows matching criteria\nTask\nCommand select: picks columns by column name\nCommand arrange reorders rows\nCommand mutate add new variable name\nCommand summarise reduce variables to values\nMultiple pipe operators\nOther functions\n\n\n\nData visualisation with ggplot2\n\n\n\nIntroduction\nIn this lecture we’ll first introduce you to the ggplot2 package, and vocabulary, for creating graphs in R. We’ll mostly follow the approach described in the book “R for data science,” which can be found here.\nWe’ll then turn to data-wrangling using the dplyr package.\nBoth ggplot2 and dplyr can be found in library(tidyverse)\nCreating a graph\nStep 1, load tidyverse:\n\n\nlibrary(\"tidyverse\")\n\n\n\nStep 2, Make sure your dataset is loaded. We’ll start with the mpg dataset\n\n\n#inspect the mpg dataset\nhead(mpg)\n\n\n# A tibble: 6 x 11\n  manufacturer model displ  year   cyl trans   drv     cty   hwy fl   \n  <chr>        <chr> <dbl> <int> <int> <chr>   <chr> <int> <int> <chr>\n1 audi         a4      1.8  1999     4 auto(l… f        18    29 p    \n2 audi         a4      1.8  1999     4 manual… f        21    29 p    \n3 audi         a4      2    2008     4 manual… f        20    31 p    \n4 audi         a4      2    2008     4 auto(a… f        21    30 p    \n5 audi         a4      2.8  1999     6 auto(l… f        16    26 p    \n6 audi         a4      2.8  1999     6 manual… f        18    26 p    \n# … with 1 more variable: class <chr>\n\nStep 3. Inspect the\"Negative relationship between highway fuel efficiency and a cars engine size (which is given by the variable displ).\n\n\n# Create graph\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  labs(title = \"Negative relationship between engine displacement and fuel efficiency.\")\n\n\n\n\nA basic problem with this graph is that we don’t know what it is representing. To avoid this problem, it is useful to get into the habit of adding titles to your graphs, and also of using informative axis labels. We do this by adding additional layers.\n\n\n# Create graph and add title\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  labs(title = \"Negative relationship between engine displacement and fuel efficiency.\") + \n  xlab(\"Engine displacement in (units)\") + \n  ylab(\"Highway miles per liter\")\n\n\n\n\nLet’s walk through the logic of the ggplot2 “grammar”:\nFirst we call the data\n\n\n# here we are calling up the data\nggplot(data = mpg)\n\n\n\nNext, we add a layer of points, by calling the relevant columns and rows of this dataset\n\n\n# Here, we add a layer of points, by calling the relevant columns and rows of this dataset\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy))\n\n\n\n\nThen we add the title\n\n\n# Create graph and add title\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  labs(title =  \"Negative relationship between engine displacement and fuel efficiency.\")\n\n\n\n\nThen we add the labels\n\n\n# Create graph and add title\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  labs(title =\"Negative relationship between engine displacement and fuel efficiency.\")   + \n  xlab(\"Engine displacement in (units)\") + \n  ylab(\"Highway miles per liter\") \n\n\n\n\nWe can change the axis starting positions:\n\n\n# Create graph and add title\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  labs(title =\"Negative relationship between engine displacement and fuel efficiency.\")   + \n  xlab(\"Engine displacement in (units)\") + \n  ylab(\"Highway miles per liter\") + expand_limits(x = 0, y = 0)\n\n\n\n\nThe generic method for adding layers is as follows:\n\nggplot(data = <DATA>) + \n  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))\n\nUsing ggplot 2 to highlight elements of interest.\nHere we can use the “color =” option.1\n\n\n# Which cases interest you in this graph?\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) \n\n\n\n\nHere’s a shape command\n\n\n# Which cases interest you in this graph?\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, shape = class)) \n\n\n\n\nHere’s a size command\n\n\n# Which cases interest you in this graph?\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, size = cty)) \n\n\n\n\nHere’s the fill command\n\n\n# Which cases interest you in this graph?\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, fill = cty)) \n\n\n\n\nHere’s the alpha command\n\n\n# Which cases interest you in this graph?\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, alpha  = .1)) \n\n\n\n\nHere’s the alpha command combined with the fill command\n\n\n# Which cases interest you in this graph?\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, alpha = cty, size = cty)) \n\n\n\n\nFacets\nWe can create multiple graphs using facets\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) + \n   facet_wrap(~ class, nrow = 2)\n\n\n\n\nWe use facet_grid for graphing the Negative relationship between two variables.\nNote the difference betwen these two graphs:\nHere the focus is on the negative relationship between class and the x variable, displacement\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) +\n  facet_grid(class ~ .)  + theme(legend.position = \"none\") \n\n\n\n\nHere the focus is on the relationship betwen class and the y variable, highway milage.\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) +\n  facet_grid(. ~ class) + theme(legend.position = \"none\") \n\n\n\n\nWe can focus on Negative relationship between class and the x and y variables simultaneously. Here we add the ’year` indicator and we do not see much of an improvement in highway milage for the different classes, adjusting for displacement:\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class)) +\n  facet_grid(class ~ year) + theme(legend.position = \"bottom\") +\n  labs(title =\"Negative relationship between engine displacement and fuel efficiency by class.\") + \n  xlab(\"Engine displacement in (units)\") + \n  ylab(\"Highway miles per liter\") \n\n\n\n\nUnderstanding your data through graphs\nWe can create a graph of relationships:\n\n\n# set better theme\ntheme_set(theme_classic())\nggplot(data = mpg) +\n  geom_smooth(mapping = aes(x = displ, y = hwy)) + \n  labs(title =\"Negative relationship between engine displacement and fuel efficiency.\") +\n  xlab(\"Engine displacement in (units)\") +\n  ylab(\"Highway miles per liter\") \n\n\n\n\nAdd points as a layer\n\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  geom_smooth(mapping = aes(x = displ, y = hwy)) +\n  theme(legend.position = \"bottom\") +\n  labs(title =\"Negative relationship between engine displacement and fuel efficiency.\") +\n  xlab(\"Engine displacement in (units)\") +\n  ylab(\"Highway miles per liter\") \n\n\n\n\nWe can write this more compactly, by including the mapping with the data layer\n\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() + \n  geom_smooth()\n\n\n\n\nThen we can include mappings for specific layers\n\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth()\n\n\n\n\nWe can add a grouping factor e.g. for “drv”, thus creating multiple lines\n\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, group = drv)) + \n  geom_point(aes(color = class)) + \n  geom_smooth()\n\n\n\n\nWe can replace the smooths with linear models\n\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, linetype = drv)) + \n  geom_point(aes(color = class)) + \n  geom_smooth(method = \"lm\")\n\n\n\n\nTransforming data\nFirst we’ll get the flights data\n\n\nlibrary(nycflights13)\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\nNext we’ll create some data frames to help us illustrate points\n\n\ndf <- data.frame(\ncolour = c(\"blue\", \"black\", \"blue\", \"blue\", \"black\"), value = 1:5)\nhead(df)\n\n\n  colour value\n1   blue     1\n2  black     2\n3   blue     3\n4   blue     4\n5  black     5\n\nRevisiting logical operators\nRecall our logical operators. These will be essential for data wrangling\n\n\nknitr::include_graphics(\"logic.png\")\n\n\n\n\nCommand filter: keeps rows matching criteria\nKeep only blue rows:\n\n\ndf%>%\nfilter(colour == \"blue\")\n\n\n  colour value\n1   blue     1\n2   blue     3\n3   blue     4\n\nKeep only values 1 and 4\n\n\ndf%>%\n  filter (value %in% c(1,4))\n\n\n  colour value\n1   blue     1\n2   blue     4\n\nKeep values 1 through 4\n\n\ndf %>%\n  filter (value %in% c(1:4))\n\n\n  colour value\n1   blue     1\n2  black     2\n3   blue     3\n4   blue     4\n\nAnother way to do the same\n\n\ndf %>%\n  filter (value != 5)\n\n\n  colour value\n1   blue     1\n2  black     2\n3   blue     3\n4   blue     4\n\nTask\nHow can we find all flights that left in January?\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\n\n\nflights%>%\n  dplyr::filter(month ==1)\n\n\n# A tibble: 27,004 x 19\n    year month   day dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1  2013     1     1      517            515         2      830\n 2  2013     1     1      533            529         4      850\n 3  2013     1     1      542            540         2      923\n 4  2013     1     1      544            545        -1     1004\n 5  2013     1     1      554            600        -6      812\n 6  2013     1     1      554            558        -4      740\n 7  2013     1     1      555            600        -5      913\n 8  2013     1     1      557            600        -3      709\n 9  2013     1     1      557            600        -3      838\n10  2013     1     1      558            600        -2      753\n# … with 26,994 more rows, and 12 more variables:\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n\nFlights delayed by more than 15 mintutes that arrived on time\n\n\nflights%>%\n  dplyr::filter (dep_delay >15 & arr_delay <=0)\n\n\n# A tibble: 4,314 x 19\n    year month   day dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1  2013     1     1     1025            951        34     1258\n 2  2013     1     1     1033           1017        16     1130\n 3  2013     1     1     2052           2029        23     2349\n 4  2013     1     1     2107           2040        27     2354\n 5  2013     1     2      727            645        42     1024\n 6  2013     1     2     1004            945        19     1251\n 7  2013     1     2     1031           1015        16     1135\n 8  2013     1     2     1500           1430        30     1741\n 9  2013     1     2     1737           1720        17     1908\n10  2013     1     2     1831           1815        16     2130\n# … with 4,304 more rows, and 12 more variables:\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n\nCommand select: picks columns by column name\nSelect the colour column\n\n\ndf%>%\n  dplyr::select ( colour )\n\n\n  colour\n1   blue\n2  black\n3   blue\n4   blue\n5  black\n\nAnother way?\n\n\ndf%>%\n  dplyr::select ( !value )\n\n\n  colour\n1   blue\n2  black\n3   blue\n4   blue\n5  black\n\nor\n\n\ndf%>%\n  dplyr::select ( -c(value ))\n\n\n  colour\n1   blue\n2  black\n3   blue\n4   blue\n5  black\n\nCommand arrange reorders rows\n\n\ndf %>%\n  arrange(value)\n\n\n  colour value\n1   blue     1\n2  black     2\n3   blue     3\n4   blue     4\n5  black     5\n\n\n\ndf %>%\n  arrange(desc(value))\n\n\n  colour value\n1  black     5\n2   blue     4\n3   blue     3\n4  black     2\n5   blue     1\n\nTask: how would we order flights by departure data and time ?\n\n\nflights %>%\n  arrange(month, day, dep_time)\n\n\n# A tibble: 336,776 x 19\n    year month   day dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1  2013     1     1      517            515         2      830\n 2  2013     1     1      533            529         4      850\n 3  2013     1     1      542            540         2      923\n 4  2013     1     1      544            545        -1     1004\n 5  2013     1     1      554            600        -6      812\n 6  2013     1     1      554            558        -4      740\n 7  2013     1     1      555            600        -5      913\n 8  2013     1     1      557            600        -3      709\n 9  2013     1     1      557            600        -3      838\n10  2013     1     1      558            600        -2      753\n# … with 336,766 more rows, and 12 more variables:\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n\nTask which flights have the greated difference between departure delay and arrival delay?\n\n\nflights%>%\n  arrange(desc(dep_delay - arr_delay))\n\n\n# A tibble: 336,776 x 19\n    year month   day dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1  2013     6    13     1907           1512       235     2134\n 2  2013     2    26     1000            900        60     1513\n 3  2013     2    23     1226            900       206     1746\n 4  2013     5    13     1917           1900        17     2149\n 5  2013     2    27      924            900        24     1448\n 6  2013     7    14     1917           1829        48     2109\n 7  2013     7    17     2004           1930        34     2224\n 8  2013    12    27     1719           1648        31     1956\n 9  2013     5     2     1947           1949        -2     2209\n10  2013    11    13     2024           2015         9     2251\n# … with 336,766 more rows, and 12 more variables:\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n\nNot this could be written briefly as this:\n\n\narrange(flights, desc(dep_delay - arr_delay))\n\n\n# A tibble: 336,776 x 19\n    year month   day dep_time sched_dep_time dep_delay arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1  2013     6    13     1907           1512       235     2134\n 2  2013     2    26     1000            900        60     1513\n 3  2013     2    23     1226            900       206     1746\n 4  2013     5    13     1917           1900        17     2149\n 5  2013     2    27      924            900        24     1448\n 6  2013     7    14     1917           1829        48     2109\n 7  2013     7    17     2004           1930        34     2224\n 8  2013    12    27     1719           1648        31     1956\n 9  2013     5     2     1947           1949        -2     2209\n10  2013    11    13     2024           2015         9     2251\n# … with 336,766 more rows, and 12 more variables:\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>\n\nCommand mutate add new variable name\n\n\ndf %>%\n  mutate(double_value = 2 * value)\n\n\n  colour value double_value\n1   blue     1            2\n2  black     2            4\n3   blue     3            6\n4   blue     4            8\n5  black     5           10\n\nOrder flights by greatest difference between departure delay and arrival delay?\n\n\nflights %>%\n  mutate(diff_dep_arr = dep_delay - arr_delay)%>%\n  select(flight,diff_dep_arr)%>%\n  arrange(desc(diff_dep_arr))\n\n\n# A tibble: 336,776 x 2\n   flight diff_dep_arr\n    <int>        <dbl>\n 1   4377          109\n 2     51           87\n 3     51           80\n 4   1465           79\n 5     51           76\n 6    673           74\n 7   1532           74\n 8   1284           73\n 9    612           73\n10    427           72\n# … with 336,766 more rows\n\nCommand summarise reduce variables to values\nSum all values in the df dataset\n\n\ndf %>%\n  summarise (total = sum(value))\n\n\n  total\n1    15\n\nSummaries the values by colour groups, and give the number of items per colour group\n\n\ndf %>%\n  group_by(colour) %>%\n  summarise(total = sum(value),\n            n = n())\n\n\n# A tibble: 2 x 3\n  colour total     n\n* <chr>  <int> <int>\n1 black      7     2\n2 blue       8     3\n\nUseful summary functions are:\nmin(x)\nmax(x)\nmean(x)\nn\nn_distinct\nsum(x)\nsum(x > 10)\nmean(x > 10)\nsd(x)\nvar(x)\nTask, how many flights flew on Christmas?\n\n\nhead(flights)\n\n\n# A tibble: 6 x 19\n   year month   day dep_time sched_dep_time dep_delay arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>\n1  2013     1     1      517            515         2      830\n2  2013     1     1      533            529         4      850\n3  2013     1     1      542            540         2      923\n4  2013     1     1      544            545        -1     1004\n5  2013     1     1      554            600        -6      812\n6  2013     1     1      554            558        -4      740\n# … with 12 more variables: sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n\n\n\nflights %>%\n  filter( month == 12, day == 25)%>%\n  summarise (n = n())\n\n\n# A tibble: 1 x 1\n      n\n  <int>\n1   719\n\nCalculate average delay:\n\n\nflights %>%\n  summarise(delay = mean(dep_delay, na.rm = TRUE))\n\n\n# A tibble: 1 x 1\n  delay\n  <dbl>\n1  12.6\n\n\n\nsummarise(flights, delay = mean(dep_delay, na.rm = TRUE))\n\n\n# A tibble: 1 x 1\n  delay\n  <dbl>\n1  12.6\n\nMultiple pipe operators\nHere we:\nGroup flights by destination.\nSummarise to compute distance, average delay, and number of flights.\nRemove Honolulu airport, because it is so far away\n\n\ndelays <- flights %>% \n  group_by(dest) %>% \n  summarise(\n    count = n(),\n    dist = mean(distance, na.rm = TRUE),\n    delay = mean(arr_delay, na.rm = TRUE)\n  ) %>% \n  filter(dest != \"HNL\")\nhead(delays)\n\n\n# A tibble: 6 x 4\n  dest  count  dist delay\n  <chr> <int> <dbl> <dbl>\n1 ABQ     254 1826   4.38\n2 ACK     265  199   4.85\n3 ALB     439  143  14.4 \n4 ANC       8 3370  -2.5 \n5 ATL   17215  757. 11.3 \n6 AUS    2439 1514.  6.02\n\n\n\nflights %>% \n  filter(!is.na(dep_delay), !is.na(arr_delay)) %>% # not cancelled\n   group_by(tailnum) %>% # group by unique aircraft\n  summarise(\n    delay = mean(arr_delay, na.rm = TRUE),\n    n = n()\n  ) %>%\n  ggplot(mapping = aes(x = n, y = delay)) + \n  geom_point(alpha = 1/10)  + \n  labs(title = \"Variation in average delay by tailnumber \") \n\n\n\n\nOther functions\nSuppose you only wanted to keep your mutated variables, in this case you can use transmute\n\n\nnew_flights <-transmute(flights,\n  gain = dep_delay - arr_delay,\n  hours = air_time / 60,\n  gain_per_hour = gain / hours\n)\nhead(new_flights)\n\n\n# A tibble: 6 x 3\n   gain hours gain_per_hour\n  <dbl> <dbl>         <dbl>\n1    -9  3.78         -2.38\n2   -16  3.78         -4.23\n3   -31  2.67        -11.6 \n4    17  3.05          5.57\n5    19  1.93          9.83\n6   -16  2.5          -6.4 \n\nTo learn more, go to https://dplyr.tidyverse.org/\n\nRemoving the axis and labels here just to keep the code compact↩︎\n",
    "preview": "posts/3_1/op.jpg",
    "last_modified": "2021-03-09T20:02:57+13:00",
    "input_file": {}
  },
  {
    "path": "posts/5_1/",
    "title": "Samples, paramaters, and elements of a linear model",
    "description": "\"What is a statistical model?\"",
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      }
    ],
    "date": "2021-03-09",
    "categories": [],
    "contents": "\n\nContents\n\n\nSamples and parameters: observation and inference\n\n\n\nLinear relationships with one co-variate\nNon-linear relationships with one co-variate\n\n\n\n",
    "preview": "posts/5_1/distill-preview.png",
    "last_modified": "2021-02-23T15:04:48+13:00",
    "input_file": {},
    "preview_width": 2500,
    "preview_height": 2500
  },
  {
    "path": "posts/2_1/",
    "title": "Coding basics",
    "description": {},
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      },
      {
        "name": "Johannes Karl",
        "url": "https://johannes-karl.com"
      }
    ],
    "date": "2021-03-02",
    "categories": [],
    "contents": "\n\nContents\nTo do:\nFundamentals of R\nHow to use R as calculator\nInspecting data\ncheck head of dataset sing head\ncheck data types using str\nnames\nview rownames\ntable (and use of $)\nchange column names\n\nBasic data structures\nvectors of numbers ( and use of c and i:x )\nvectors of characters\ndataframes (2 dimensional square arrays of vectors)\nrename columns of a data frame\nmatrix\nlists\n\nClasses in R\nnumeric and integer\nfactors\n\nIndexing in R\ncolumns\nrows\nrows and columns\nselection by negation\n\nBasic data wrangling in R\nuse of $ and [i:x]\n\nIndexing for logical operations\ndefinitions\nevaluation using logical operators\n\nThe basic structure of R commands\nmean\nsd\nsummary\nCoding\nInstalling package\n\nRolling your own code\nCoding etiquette\n\nusing R!\ndata summary\nmodel\nresults\ngraph predicted effects\nWhat is the advantage of this graph?\ntry another model\n\nto be continued\n\nTo do:\nA good, and free introduction to R for Data Science Read chapters: 2-8 (they are short chapters.)\nFundamentals of R\nA console runs all your code in R\nA source page runs all your code in R.\nA working directory is where R will look for raw data and other material.\nIn R-studio, (for starters) you can can use the file tab to import and save your material.\nSimilarly, in R-studio, (for starters) you can can use install packages by clicking the Install tab in the package pane (generally lower right pane) to install packagees.\nHow to use R as calculator\nWe can use R as a calculator. You can run any mathematical operation you would normally use by entering it into the console:\n\n\n## Addition\nx <- 3 + 2\nx\n\n\n[1] 5\n\n## Subtraction\nx <-  3 - 2\nx\n\n\n[1] 1\n\n## Multiplication\nx <-  3 * 2\nx\n\n\n[1] 6\n\n## Division\nx <-  3 / 2\nx\n\n\n[1] 1.5\n\n## Modulus (Remainder from division)\nx <-  3 %% 2\nx\n\n\n[1] 1\n\n## Exponentiation\nx = 3 ^ 2\nx\n\n\n[1] 9\n\n## Integer Division (Number of times denominator fits in numerator)\nx = 3 %/% 2\nx\n\n\n[1] 1\n\nInspecting data\nIn a moment, we’ll teach you how to import data into R. For now, let’s work with a dataset that is already present in your R environment, the iris dataset.\nHere are some useful commands for inspecting data\ncheck head of dataset sing head\n\n\n# the top rows and columns of the dataset\nhead(iris)\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\ncheck data types using str\n\n\nstr(iris)\n\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\nnames\n\n\n#names of the columns\nnames(iris)\n\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\" \n[5] \"Species\"     \n\nview rownames\n\n\n# view rownames\nrownames(iris)\n\n\n  [1] \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\" \n [11] \"11\"  \"12\"  \"13\"  \"14\"  \"15\"  \"16\"  \"17\"  \"18\"  \"19\"  \"20\" \n [21] \"21\"  \"22\"  \"23\"  \"24\"  \"25\"  \"26\"  \"27\"  \"28\"  \"29\"  \"30\" \n [31] \"31\"  \"32\"  \"33\"  \"34\"  \"35\"  \"36\"  \"37\"  \"38\"  \"39\"  \"40\" \n [41] \"41\"  \"42\"  \"43\"  \"44\"  \"45\"  \"46\"  \"47\"  \"48\"  \"49\"  \"50\" \n [51] \"51\"  \"52\"  \"53\"  \"54\"  \"55\"  \"56\"  \"57\"  \"58\"  \"59\"  \"60\" \n [61] \"61\"  \"62\"  \"63\"  \"64\"  \"65\"  \"66\"  \"67\"  \"68\"  \"69\"  \"70\" \n [71] \"71\"  \"72\"  \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  \"78\"  \"79\"  \"80\" \n [81] \"81\"  \"82\"  \"83\"  \"84\"  \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  \"90\" \n [91] \"91\"  \"92\"  \"93\"  \"94\"  \"95\"  \"96\"  \"97\"  \"98\"  \"99\"  \"100\"\n[101] \"101\" \"102\" \"103\" \"104\" \"105\" \"106\" \"107\" \"108\" \"109\" \"110\"\n[111] \"111\" \"112\" \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\" \"120\"\n[121] \"121\" \"122\" \"123\" \"124\" \"125\" \"126\" \"127\" \"128\" \"129\" \"130\"\n[131] \"131\" \"132\" \"133\" \"134\" \"135\" \"136\" \"137\" \"138\" \"139\" \"140\"\n[141] \"141\" \"142\" \"143\" \"144\" \"145\" \"146\" \"147\" \"148\" \"149\" \"150\"\n\nhead(iris)\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\ntable (and use of $)\n\n\n# create a table\ntable(iris$Species)\n\n\n\n    setosa versicolor  virginica \n        50         50         50 \n\nchange column names\n\n\n# change column names\n# create new dataset for \nirisdat2 <- iris\n# chage names of columns\nnames(irisdat2)[] <- c(\"s_l\", \"s_w\", \"p_l\", \"p_w\", \"sp\")\n#inspect\nhead(irisdat2)\n\n\n  s_l s_w p_l p_w     sp\n1 5.1 3.5 1.4 0.2 setosa\n2 4.9 3.0 1.4 0.2 setosa\n3 4.7 3.2 1.3 0.2 setosa\n4 4.6 3.1 1.5 0.2 setosa\n5 5.0 3.6 1.4 0.2 setosa\n6 5.4 3.9 1.7 0.4 setosa\n\nBasic data structures\nvectors of numbers ( and use of c and i:x )\n\n\ngo_vector <- c(1:5)\ngo_vector\n\n\n[1] 1 2 3 4 5\n\nvectors of characters\n\n\ngo_vector2 <- c(\"hello\", \"world\")\ngo_vector2\n\n\n[1] \"hello\" \"world\"\n\n\n\nas.vector(irisdat2$s_l)\n\n\n  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7\n [17] 5.4 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4\n [33] 5.2 5.5 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6\n [49] 5.3 5.0 7.0 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1\n [65] 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7\n [81] 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7\n [97] 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4\n[113] 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1\n[129] 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8\n[145] 6.7 6.7 6.3 6.5 6.2 5.9\n\ndataframes (2 dimensional square arrays of vectors)\n2 x dimensional “square” array with equal column and row lengths. Can contain data with multiple formats characters, facotors, integers, etc.\n\n\nyuk <- data.frame(c(\"the\", \"enumeration\", \"of\", \"the\", \"constitution\"), 6:10)\nyuk\n\n\n  c..the....enumeration....of....the....constitution.. X6.10\n1                                                  the     6\n2                                          enumeration     7\n3                                                   of     8\n4                                                  the     9\n5                                         constitution    10\n\nrename columns of a data frame\n\n\nnames(yuk)[] <- c(\"short\", \"best\")\nyuk\n\n\n         short best\n1          the    6\n2  enumeration    7\n3           of    8\n4          the    9\n5 constitution   10\n\nmatrix\nSame as a dataframe but can only contain one format (e.g. numbers or characters)\n\n\nyok <- as.matrix(yuk)\nyok\n\n\n     short          best\n[1,] \"the\"          \" 6\"\n[2,] \"enumeration\"  \" 7\"\n[3,] \"of\"           \" 8\"\n[4,] \"the\"          \" 9\"\n[5,] \"constitution\" \"10\"\n\nlists\nArrays with constraints on “squareness” or data types.\n\n\nlok <- list(yok, yuk)\nlok\n\n\n[[1]]\n     short          best\n[1,] \"the\"          \" 6\"\n[2,] \"enumeration\"  \" 7\"\n[3,] \"of\"           \" 8\"\n[4,] \"the\"          \" 9\"\n[5,] \"constitution\" \"10\"\n\n[[2]]\n         short best\n1          the    6\n2  enumeration    7\n3           of    8\n4          the    9\n5 constitution   10\n\nClasses in R\nnumeric and integer\nnumeric means number\n\n\nis.numeric(4.2)\n\n\n[1] TRUE\n\ninteger means a number that is not a fraction\n\n\nis.integer(4.2)\n\n\n[1] FALSE\n\nNote the default here:\n\n\nis.integer(4)\n\n\n[1] FALSE\n\n\n\nis.integer(as.integer(4))\n\n\n[1] TRUE\n\nWe’ll need to ensure that certain numbers are integers later on, when we are estimating poisson models and/or doing bayesian data analysis.\ncharacters\nCharacters are strings:\n\n\n# this is a character\nis.character(\"chapeau\")\n\n\n[1] TRUE\n\n# this is not\nis.character(4)\n\n\n[1] FALSE\n\nfactors\nA factor is a category. It can be ordered (e.g. an ordinal scale) or unordered (say a participant in a study, or a wave in a longitidunal study)\n\n\nstr(iris)\n\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\nIt’s really important to check that ordered categories are really ordered categories in your dataset.\nThere was is a famous retraction recently where a group found that religion was associated with immorality, however the countries in the the study had been coded as numbers, not as factors. The study’s effect entirely disappeared once this error was corrected!\nIndexing in R\ncolumns\n\n\n# select second column of \"yuk\"\nyuk[, 2]\n\n\n[1]  6  7  8  9 10\n\nrows\n\n\n# select second row of yuk\nyuk[2, ]\n\n\n        short best\n2 enumeration    7\n\nrows and columns\n\n\n#select first row and first column of yuk\nyuk[1, 2]\n\n\n[1] 6\n\nselection by negation\n\n\n# negate the first column of yuk\nyuk[, -1]\n\n\n[1]  6  7  8  9 10\n\n\n\n# negate the second column of yuk\nyuk[,-2]\n\n\n[1] \"the\"          \"enumeration\"  \"of\"           \"the\"         \n[5] \"constitution\"\n\nBasic data wrangling in R\nc\n\n\n# select only the first and second cols of iris\niris_short2 <- iris[ ,c( 1, 2 ) ]\nhead(iris_short2)\n\n\n  Sepal.Length Sepal.Width\n1          5.1         3.5\n2          4.9         3.0\n3          4.7         3.2\n4          4.6         3.1\n5          5.0         3.6\n6          5.4         3.9\n\n-c\n\n\n# select all columns but the first and second of iris\niris_short <- iris[ ,-c( 1, 2 ) ]\nhead(iris_short)\n\n\n  Petal.Length Petal.Width Species\n1          1.4         0.2  setosa\n2          1.4         0.2  setosa\n3          1.3         0.2  setosa\n4          1.5         0.2  setosa\n5          1.4         0.2  setosa\n6          1.7         0.4  setosa\n\ncbind\n\n\n# for use with dataframes and matrices -- note that srings a are c\nyokyuk<-cbind(yok,yuk)\nyokyuk\n\n\n         short best        short best\n1          the    6          the    6\n2  enumeration    7  enumeration    7\n3           of    8           of    8\n4          the    9          the    9\n5 constitution   10 constitution   10\n\nstr(yokyuk)\n\n\n'data.frame':   5 obs. of  4 variables:\n $ short: chr  \"the\" \"enumeration\" \"of\" \"the\" ...\n $ best : chr  \" 6\" \" 7\" \" 8\" \" 9\" ...\n $ short: chr  \"the\" \"enumeration\" \"of\" \"the\" ...\n $ best : int  6 7 8 9 10\n\nrbind\n\n\nrbind(yuk[,],yok[2:3])\n\n\n         short best\n1          the    6\n2  enumeration    7\n3           of    8\n4          the    9\n5 constitution   10\n6  enumeration   of\n\nuse of $ and []\n\n\n#select the fifth row of the column\niris_short$Petal.Width[5]\n\n\n[1] 0.2\n\nuse of $ and [i:x]\n\n\n#select the 5th-25th row of the column\niris_short$Petal.Width[5:25]\n\n\n [1] 0.2 0.4 0.3 0.2 0.2 0.1 0.2 0.2 0.1 0.1 0.2 0.4 0.4 0.3 0.3 0.3\n[17] 0.2 0.4 0.2 0.5 0.2\n\nIndexing for logical operations\ndefinitions\n== means “equals to”\n!= means “not equals to”\n> means “greater than”\n< means “less than”\n>=means “greater than or equal”\n<= means “less than or equal”\n! means “not”\n& means “and”\n| means “or”!\nis.na means “is missing” (missing values are coded in R as NA)\n> -9999 == 666 > TRUE !!! :)\nevaluation using logical operators\ncreate dataframe\n\n\n# create data frame\ndf<-data.frame( x = c(1:10),y = c(11:20) )\n\n\n\nevaluate cases\n\n\n#evaluate cases in y that greater  than 15\ndf[,\"y\"] > 15\n\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n\nsum instances\n\n\n# count these cases\nsum(df[,\"y\"] > 15)\n\n\n[1] 5\n\nsum instances with a different operator\n\n\n# count cases greater than or equal to 15\nsum(df[,\"y\"] >= 15)\n\n\n[1] 6\n\nanother methods\n\n\n# another approach\nsum(df$y >= 15)\n\n\n[1] 6\n\nusing the or function\n\n\n# combine operators\nsum(df$y >= 15 | df$y <=11)\n\n\n[1] 7\n\ngo meta\n\n\n# go \"meta\"\nsum(df$y >= 15 | df$y <= 11) == sum(df$x >=5 | df$x <=1 )\n\n\n[1] TRUE\n\ngo meta-meta!\n\n\n# go meta-meta\nsum(sum(df$y >= 15 | df$y <= 11) == sum(df$x >=5 | df$x <=1 ))\n\n\n[1] 1\n\nuse operators to modify data\n\n\n# using assignment to modify data\ndf$x[df$x >=5 ] <- NA\ndf\n\n\n    x  y\n1   1 11\n2   2 12\n3   3 13\n4   4 14\n5  NA 15\n6  NA 16\n7  NA 17\n8  NA 18\n9  NA 19\n10 NA 20\n\nusing is.na and !is.na\n\n\nsum(is.na(df$x))\n\n\n[1] 6\n\n\n\nsum(!is.na(df$x))\n\n\n[1] 4\n\n\n\nsum(is.na(df$x)) + sum(!is.na(df$x)) \n\n\n[1] 10\n\nThe basic structure of R commands\nThe four main elements of every R code are:\nobjects,\nfunctions,\narguments\noperators.\nFigure 1 provides a simple example, that produces a new object which contains the mean of variable x.\n\n\n\nFigure 1: The Basic Syntax of R\n\n\n\nmean\nThe function mean generates the arithmetic mean of an input object:\n\n\n# a function to assess the mean of a Sepal.Length\nmean(iris$Sepal.Length)\n\n\n[1] 5.843333\n\nsd\nThe function sd gives us the standard deviation:\n\n\n# standard deviation of Sepal.Length\nsd(iris$Sepal.Length)\n\n\n[1] 0.8280661\n\nsummary\n\n\n# summary of the \"Sepal Length\" column\nsummary(iris$Sepal.Length)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  4.300   5.100   5.800   5.843   6.400   7.900 \n\n\n\n# summary of the Iris data set\nsummary(iris)\n\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\nCoding\nThe object needs to be specified inside of the function brackets as the x argument, in this case we define x = df .\nLast, we assign the result of this function for later us via the <- operator to an object which we decided to call object.\nIn other words, we create a new object that can be further manipulated and contains information about the mean of a previously created object “x”. This structure represents the foundation of most operations in R.\nInstead calling the mean function as above one could manually add all values of x dividing it by the number of x values.\nNevertheless, this would be very cumbersome.\nFor this reason, functions (pre-assembled lines of code) exist to reduce the amount of coding necessary.\nThese functions can be bundled into packages. R’s capacity for creating packages is main appeal of R as a statistical tool because community developed functions are available from a central repository called CRAN in the form of packages.\nThese packages can be installed in R with the command install.packages(“package name”).\nIt is important that you only need to install a package once on your machine, expect if you want to upgrade the package. Generally speaking you regularly want to upgrade your packages, but keep a permanent note in your code which version of a package you used when it was initially written.\nInstalling package\ninstall these packages (we’ll be using them later)\n\n\ninstall.packages(\"devtools\") # installing packages\n\n\n\n\n\ninstall.packages(\"remotes\") # installing packages\n\n\n\n\n\ninstall.packages(\"tidyverse\") ## data wrangling and visualisation\n\n\n\n\n\ninstall.packages(\"lme4\") # multilevel modelling\n\n\n\n\n\ninstall.packages(\"patchwork\") # arranging multiple graphs\n\n\n\n\n\nlibrary(devtools)\ndevtools::install_github(\"strengejacke/sjPlot\") # plots and tables\n\n\n\n\n\ninstall.packages(\"papaja\")  # writing APA documents\n\n\n\n\n\ninstall.packages(\"table1\") # summary tables\n\n\n\nextra credit\n\n\ndevtools::install_github(\"easystats/easystats\")\n\n\n\n\n\ndevtools::install_github(\"strengejacke/ggeffects\")\n\n\n\nsuper extra credit\n\n\nif (!requireNamespace(\"remotes\")) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"paul-buerkner/brms\")\n\n\n\n\n\ndevtools::install_github(\"stan-dev/cmdstanr\")\n\n\n\nRolling your own code\nLet’s use R to write a function. Recall that a factorial for a number \\(n\\) is the product of all positive inters less than or equal to \\(n\\). Thus the factorial for 5 = \\[1 \\times 2 \\times 3 \\times 4 \\times 5\\]\nIn R we can write a function:\n\n\n# create a function to perform the factorial operation \ngo_factorial <- function(x) {\n  y <- 1\n  for (i in 1:x) {\n    y <- y * ((1:x)[i])\n  }\n  print(y)\n}\n\n\n\nLet’s try it out\n\n\n# test of the `go_factorial` function\ngo_factorial(5)\n\n\n[1] 120\n\nLet’s see if this is the number that R’s factorial function produces:\n\n\n# R's native factorial function\nfactorial(5)\n\n\n[1] 120\n\nWe can use R’s == relational operator to evaluate whether the two functions are the same\n\n\n# are the two functions equivalent for factorial five\ngo_factorial(5) == factorial(5)\n\n\n[1] 120\n[1] TRUE\n\nFor more information about relational operators type the following into your console:\n\n\n?`==`\n\n\n\nWe can make more complicated functions:\n\n\n# function for factorial that throws warnings when the data that are entered are not appropriate. \ngo_bayes_factorial <- function (x) {\n  # check is the number is negative, positive or zero\n  if (x  < 0) {\n    print(\"not even Ashley Bloomfield could make a factorial for a negative number\")\n  } else if (x == 0) {\n    print(\"the factorial of zero is defined as 1\")\n  } else {\n    for (i in 1:x)\n      y <- 1\n    for (i in 1:x) {\n      y <- y * ((1:x)[i])\n    }\n    print(y)\n  }\n}\n\n\n\nWe’ll come back to functions later. It’s useful to look at an example of a function so that you can see that R is much more than a calcultor. It is a tool to empower you for doing data anlysis in new and creative ways.\nCoding etiquette\nKeep your code legible and annotate\nWhy is this bad code?\n\n\ndf1<-data.frame(a=rnorm(10,1,1),b=rnorm(10,4,8),c=rnorm(10,8,1),d=rnorm(10,7,2))\n\n\n\nWhy is this better code?\n\n\n# Create a data frame with four columns of randomly generated numbers specifying different means and standard deviations \ndf1 <- data.frame(\n  a = rnorm( 10, mean = 1, sd = 1 ),\n  b = rnorm( 10, mean = 4, sd = 8 ),\n  c = rnorm( 10, mean = 8, sd = 1 ),\n  d = rnorm( 10, mean = 7, sd = 2 )\n)\n\n\n\nusing R!\ndata summary\n\n\n# basic summary\nsummary(iris)\n\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\n\ntable1::table1(~ Sepal.Length   + Sepal.Width   + Petal.Length  + Petal.Width |Species, data = iris  )\n\n\n\nsetosa(N=50)\nversicolor(N=50)\nvirginica(N=50)\nOverall(N=150)\nSepal.Length\n\n\n\n\nMean (SD)\n5.01 (0.352)\n5.94 (0.516)\n6.59 (0.636)\n5.84 (0.828)\nMedian [Min, Max]\n5.00 [4.30, 5.80]\n5.90 [4.90, 7.00]\n6.50 [4.90, 7.90]\n5.80 [4.30, 7.90]\nSepal.Width\n\n\n\n\nMean (SD)\n3.43 (0.379)\n2.77 (0.314)\n2.97 (0.322)\n3.06 (0.436)\nMedian [Min, Max]\n3.40 [2.30, 4.40]\n2.80 [2.00, 3.40]\n3.00 [2.20, 3.80]\n3.00 [2.00, 4.40]\nPetal.Length\n\n\n\n\nMean (SD)\n1.46 (0.174)\n4.26 (0.470)\n5.55 (0.552)\n3.76 (1.77)\nMedian [Min, Max]\n1.50 [1.00, 1.90]\n4.35 [3.00, 5.10]\n5.55 [4.50, 6.90]\n4.35 [1.00, 6.90]\nPetal.Width\n\n\n\n\nMean (SD)\n0.246 (0.105)\n1.33 (0.198)\n2.03 (0.275)\n1.20 (0.762)\nMedian [Min, Max]\n0.200 [0.100, 0.600]\n1.30 [1.00, 1.80]\n2.00 [1.40, 2.50]\n1.30 [0.100, 2.50]\n\n\n\n\n# plot relationship (what is happening here? )\nplot( Sepal.Length   ~ Sepal.Width , data = iris )\n\n\n\n\nmodel\n\n\nlibrary(\"tidyverse\")  # plotting\nlibrary(\"ggeffects\")  # plotting\nlibrary(\"ggplot2\")  # plotting\nlibrary(\"patchwork\") # arrange multiple plots\nlibrary(\"sjPlot\")  # tables and plots\n\n# basic model\nm1<- lm(Sepal.Length ~ Sepal.Width, data = iris)\nsummary(m1)\n\n\n\nCall:\nlm(formula = Sepal.Length ~ Sepal.Width, data = iris)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.5561 -0.6333 -0.1120  0.5579  2.2226 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   6.5262     0.4789   13.63   <2e-16 ***\nSepal.Width  -0.2234     0.1551   -1.44    0.152    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8251 on 148 degrees of freedom\nMultiple R-squared:  0.01382,   Adjusted R-squared:  0.007159 \nF-statistic: 2.074 on 1 and 148 DF,  p-value: 0.1519\n\nresults\n\n\n# better summary method\nsjPlot::tab_model(m1)\n\n\n\n \n\n\nSepal.Length\n\n\nPredictors\n\n\nEstimates\n\n\nCI\n\n\np\n\n\n(Intercept)\n\n\n6.53\n\n\n5.58 – 7.47\n\n\n<0.001\n\n\nSepal.Width\n\n\n-0.22\n\n\n-0.53 – 0.08\n\n\n0.152\n\n\nObservations\n\n\n150\n\n\nR2 / R2 adjusted\n\n\n0.014 / 0.007\n\n\n\n\n# plot the coefficients\nsjPlot::plot_model(m1)\n\n\n\n\ngraph predicted effects\n\n\n# plot the predicted relationship of Sepal Width on Sepal Length\np1 <- ggeffects::ggpredict(m1, terms = \"Sepal.Width\")\nplot(p1)\n\n\n\n\nWhat is the advantage of this graph?\n\n\npp1 <- plot(p1,\n            add.data = TRUE,\n            dot.alpha = .8,\n            jitter = .2)\npp1\n\n\n\n\ntry another model\n\n\nhead(iris)\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\nsummary (m2 <- lm(Petal.Length ~ Petal.Width, data = iris)) \n\n\n\nCall:\nlm(formula = Petal.Length ~ Petal.Width, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.33542 -0.30347 -0.02955  0.25776  1.39453 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  1.08356    0.07297   14.85   <2e-16 ***\nPetal.Width  2.22994    0.05140   43.39   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4782 on 148 degrees of freedom\nMultiple R-squared:  0.9271,    Adjusted R-squared:  0.9266 \nF-statistic:  1882 on 1 and 148 DF,  p-value: < 2.2e-16\n\n\n\npp2<-plot(\n  p2 <- ggeffects::ggpredict(m2, terms = \"Petal.Width\"),\n  add.data = TRUE,\n  dot.alpha = .8,\n  jitter = .2\n) \npp2\n\n\n\n\n\n\n## arange plots\nlibrary(patchwork)\npp1 / pp2 + plot_annotation(title = \"two plots\", tag_levels = \"i\")\n\n\n\n\nto be continued\n\n\n\n",
    "preview": "posts/2_1/syntax.png",
    "last_modified": "2021-03-02T19:39:22+13:00",
    "input_file": {},
    "preview_width": 1285,
    "preview_height": 478
  },
  {
    "path": "posts/1_1/",
    "title": "Course basics",
    "description": "Goals: (1) Download Rstudio (2) Get Git (3) Teach you the essentials of Rmarkdown (4) Integrate (1)-(3).",
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      },
      {
        "name": "Johannes Karl",
        "url": "https://johannes-karl.com"
      }
    ],
    "date": "2021-02-23",
    "categories": [],
    "contents": "\n\nContents\nTo do:\nDownload R\nDownload R-Studio desktop\nRead about Rmarkdown\nRecommended reading\nWho is this course for?\nHow will you benefit from this course?\n\nOur approach to teaching and learning\nWhat is R?\nIn a nutshell\nHistory\nPurpose\n\nWhat is R Studio?\nThe IDE\nA quick walk through R Studio\n\nGitHub\nWhat is Git/GitHub?\nInstall Git\nCreate a repository\nNext copy the location\nThen open a new project in Rstudio as a GitHub project\n\nThen open an Rmarkdown document, write and save it\nThen commit your Rmarkdown document by including a message, and “pushing” to GitHub\nNext commit!\nExtra information\n\nRMarkdown\nWhat is Rmarkdown?\nWhy is Rmarkdown useful?\nExtra information\nTips and tricks (JB)\nFinal thought: why quantitative psychology has to change (Why can’t I use SPSS, JK)\n\nFinal though\nLecture slides\nWeekly problem sets\nTask 1 Apply for a github education account\nTask 2 Download R for free here:\nTask 3 Download Rstudio for free here:\nTask 4 Create your first repository\nTask 5 Commit your first Rmarkdown journal\nGrading points\nSubmit a link to your journal on Blackboard.\n\n\nTo do:\nDownload R\nR is freely available for download at: https://www.r-project.org/ Please make sure that you have a current version of R-studio desktop on your machine\n\n\n\nDownload R-Studio desktop\nRstudio desktop is also freely available for download at:\nhttps://rstudio.com/products/rstudio/download/#download\nPlease make sure that you have the current version of R-studio desktop on your machine\n\n\n\nRead about Rmarkdown\nRead Danielle Navarro’s brief account of Rmarkdown here\nRecommended reading\nThis is a thorough rmarkdown workshop. You might quickly feel lost. Don’t worry about. We only expect you to acquire the basics this week.\nRmarkdown workshop\n\n\n\n\n\n\n\n\n\nWho is this course for?\nFor those of you who always wanted to learn R but never thought they could, this course is for you.\nHow will you benefit from this course?\nYou’ll learn how to use R, and Github, and we’ll teach you the fundamentals of statistics with a focus thinking not on rules.\nYou’ll learn how to learn – that is, how to obtain the resources you need to address a problem at hand.\nBy the end of the course, you’ll know how to:\nData skills:\nperform your data analysis in R\ndocument your analysis and collaborate in GitHub\ncreate a publication-ready article, with tables and graphs\ncreate a free personal website on github.\nStatistical skills:\nlearn the importance of knowing your question\nlearn how to collect data that bears on your question\nlearn how to explore your data visually\nlearn how to avoid common modelling pitfalls\nlearn how to improve your inference using multi-level models\nOur approach to teaching and learning\n\n\nThis course is designed to provide you with basic understanding, useful tips, and some guide rails for learning. Our main task is to give you the confidence, and the inspiration, for independent learning.\nWhat is R?\nIn a nutshell\nR is a free programming language and software environment for statistical computing (for download links see here: Windows, Mac).\nHistory\nR is the brainchild of Ross Ihaka and [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician). It was created at the University of Auckland, where Ross Ihaka remains a professor of statistics.\nPurpose\nR was conceived to be a flexible language for data analysis usable by researchers. Since the initial beta release of R in 2000 the language has gained substantial popularity inside and outside of academia (have a look at this blog post for an interesting analysis). New versions of R are released periodically and can be downloaded and installed to replace the older R version.\nWhat is R Studio?\nThe IDE\nThe are many ways for using R on your computer. For the purposes of getting started, we will be using the Integrated Development Environment (IDE): R Studio.\nR Studio provides an interface with a number of user-friendly options, including a separate console and editor that has various help and syntax-auto-complete functions, and various tools for plotting, history, data visualization, debugging and work space management. It is important to remember that R and R Studio are not the same thing.\n\nA quick walk through R Studio\n\n\nGitHub\nWhat is Git/GitHub?\nGithub is a version control system. It is similar to Google docs, though for code. It is useful for collaboration because code easily breaks. It is only rarely possible to simultaneously work in real time on the same code because it will eventually break. Where and how is not easy to assess.\nA second function of GitHub is that it allows us to reconstruct histories of analysis. This is critical for open and reproducible science. This is the main function that we will be examining here.\nA third function, which pertains to single users, is that when writing code you can rewind and recover from your mistakes. This will save you a whole lot of time in the end.\nNote that GitHub has an interface with Rstudio. You will be using GitHub with Rstudio throughout this course.\nInstall Git\nWe suggested installing the educational version because this will allow you to have private repositories.\nIf you haven’t done that, but want to get started you can open a free account and retrospectively add your educational account later.\nPRO TIP Pick a user name that will be OK for professional purposes. If in doubt use your name.\nDirections for installing Git can be found http://github.com\nCreate a repository\nFirst create a repository on GitHub\n\n\n\nNext copy the location\n\n\n\nThen open a new project in Rstudio as a GitHub project\n\n\n\nThen open an Rmarkdown document, write and save it\nFirst, make sure that Rmarkdown is installed:\n\n\n# run this code\nif (!requireNamespace(\"devtools\"))\n  install.packages('devtools')\ndevtools::install_github('rstudio/rmarkdown')\n\n\n\nNext, create a document\n\n\n\nMake sure you save your document\nPress ⌘ + S  is the command for “save”\nThen commit your Rmarkdown document by including a message, and “pushing” to GitHub\nNote that we don’t want want to push .Rproj files to GitHub (this will mess up your collaborations), so I edited my .gitignore file.\nTypically you won’t want to be pushing large html files back and forth to GitHub (that can cause GitHub to freeze).\nYou can edit your gitingore file by adding a * like so:\n/*.html\nsee: https://git-scm.com/docs/gitig\nNext commit!\n\n\n\nVoila!\nExtra information\nJB’s recommendations for using Git and Rstudio\nThis is a very good tutorial on github and Rstudio: link\nVideo link\nA very brief setup video for Mac Users Link\nJK’s recommendations for using Git and Rstuio\nsetup\nRMarkdown\nWhat is Rmarkdown?\nIn the example above we breezed through Rmarkdown without exampling it. What is Rmarkdown?\nRmarkdown is a format for combining data-analysis with ordinary writing using a simple markup language.\nThe Rmarkdown code we used to write the opening paragraph looks like this.\n\ndiv.blue{ background-color:#e6f0ff}\n\n## To do\nRead Danielle Navarro's brief account of \nRmarkdown [here](https://slides.djnavarro.net/starting-rmarkdown/#8)\n\nThe:\n\n##\n\nmakes a heading. Then we write as we ordinarily would write:\n\nRead Danielle Navarro’s brief account of Rmarkdown\n\nand we include a link by typing\n\n[here](https://slides.djnavarro.net/starting-rmarkdown/#8)\n\nThink of rmarkdown as writing in word but without having to use your mouse all the time, and you can write up your analysis while writing in a one0stop shop.\nRmarkdown is just an efficient method for composing text without having to reach for your mouse, and a way of documenting and reporting your analysis\nWhy is Rmarkdown useful?\nRmarkdown merges two very powerful ideas: 1. R as a coding based tool to make your analysis repeatable; 2. markdown an approach to writing text that allows for the direct embedding of code output.\nThis is an immensely powerful approach that can be used for everything, from writing research papers, to writing complex technical documentation. This website is written Rmarkdown.\nYou will be creating a website similar to Johannes Karl’swebsite and Joseph Bulbulia’s websiteand you will do this by written using Rmarkdown).\nYou might think that writing in R markdown is only a nice technical trick for people really into coding, but in reality it addresses a central problem of statistical analysis.\nThe majority of errors in quantitative research papers (some meta-researchers indicate values as high as 80%) are human errors in transcribing values from the statistical software they are using to the final document (for a marginally entertaining story around this issue see this post).\nExtra information\ncoding tips Rmarkdown website\nJB’s recommendation for a very short introduction to Rmarkdown: https://rpubs.com/bpbond/626346\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTips and tricks (JB)\nOne day, someone might ask you to collaborate in \\(\\LaTeX\\) (pronounced “Lay-Tek”). \\(\\LaTeX\\) is a document preparation system developed by Leslie Lamport in the 1980s that uses \\(\\TeX\\), a typesetting system that Donald Knuth developed in the 1970s to create mathematical documents. Writing in LaTeX is only a little more complicated than writing in markdown. For example, instead of writing # Heading, ## Subheading, ## Subsubheading, you would write \\section{Heading} \\subsection{Subheading}, \\subsubsection{Subsubheading}. However, the principles of mouseless composition that make Rmarkdown so nice, also make LaTeX nice. Rmarkdown shares features for bibliographic referencing with LaTeX that we’ll cover in later weeks. For now, since we are teaching you about Rmarkdown, we thought it’d be useful to teach about LaTeX too. Stay tuned for more.\nFinal thought: why quantitative psychology has to change (Why can’t I use SPSS, JK)\nQuantitative psychology has long struggled with replicability of it’s results both in substantive and also statistical areas. Concerns around these topics have already been raised on works by authors such as Joseph Banks Rhine the founder of modern parapsychology in the 1930s. Numerous authors, even at the time criticized both methods of the experiment and of the analysis [@gulliksenExtraSensoryPerceptionWhat1938]. In modern times, Deryl Bem’s article “Feeling the Future” that reported evidence in favor of Extra Sensory Perception revived this debate and led to an increased uptake of Open Science methods. Importantly, this is not only an issue in psychology, but instead affects all quantitative fields such as biology, chemistry, and physics. Out of the many issues that are addressed as part of the open science movement (if you are interested in getting active in it have a look at ANZORN) we will focus mostly on aspects of reproducability in analysis.\nUntil recently IBMs SPSS (Statistical Package for the Social Sciences), which originally launched in 1968 dominated the research space in psychology. If you never had the fortune of working with SPSS this is what it looked like:\n\n\n\nSPSS presented the user with a GUI (Graphical User Interface) through which they could run tests on their data. The big issue was that each statistical test has many different options researchers can choose (you will often hear people talk about researcher degrees of freedom) and a GUI makes it very difficult to accurately record every small setting a researcher has chosen. As a work around researchers could either store their output of the analysis which recorded some settings, but even for moderately complex analysis this output could stretch in the hundredth of pages. Alternatively, researchers could save the underlying code that SPSS used, but this was also very clunky and extremely arcane to understand. To give you a sense of scope below you see a snippet from a widely used analysis in SPSS aimed at examining the similarity of factor structures across groups. This code has a total of 130 lines that researchers would have needed to largely enter by hand and double check for any potential coding errors.\n\n\n\nAdditionally, some changes made by researchers were extremely difficult to account for. For example, when a researcher re-coded a variable say reversing its direction there was no way of knowing that this had taken place if you later looked at the data set. Together with the rise in complex analysis in psychology this has led to a steady decline in the use of SPSS and most psychology departments, as well as private, and governmental stake holder now require a certain fluency in R or similar coding based languages.\nFinal though\nR, Rstudio, GitHub, R-markdown \\(\\dots\\) these are just tools that fit our task\nOur main task in this course is to develop statistical intuition and workflows that will enable you to do better science.\nLecture slides\nClick here to go to the lecture slides.\n\n\n\nfitvids('.shareagain', {players: 'iframe'});\n\nWeekly problem sets\n** Note we will be working with you in the first week’s workshop to get you through this assessment task. We don’t expect that you will be able to do any of this before the first week.\nTask 1 Apply for a github education account\napply here: https://education.github.com/pack/offers\nset up a github account.\nchoose a username that will be OK for professional purposes (e.g. your name)\nTask 2 Download R for free here:\nhttps://www.r-project.org\nTask 3 Download Rstudio for free here:\nhttps://rstudio.com/products/rstudio/download/#download\nUpdate R and Rstudio to the latest versions. Don’t worry if you have problems, we’ll be working through your problems in the first week, and throughout the course. We assume no prior experience with R or Git/GitHub\nTask 4 Create your first repository\nTask 5 Commit your first Rmarkdown journal\nCreate your first Rmarkdown document, and title it “My Journal”\nRecord your impressions of the process of getting set up with RStudio and GitHub\nRecord any help you have offered to other people, and any help you have sought from other people, along the way.\nSave the document and commit it to GitHub.\nNote: set your github repository to private if you wish the account to be private\nGrading points\nYour Rmarkdown document must include each of the following\n\nHeading\n\n\ncrossed out text\n\n\nlink to a website\n\n\nA footnote 1\n\n\nAn inspirational quote\n\n\nBONUS: figure out how to add a bibliographic citation, such as [@darwin1964origin]\n\n\nA record of help you sought and offered.\n\nSubmit a link to your journal on Blackboard.\nBlackboard isn’t our favourite tool, however, we need to respect the norms of our community. For this reason, presently all of your assessments need to be uploaded through Blackboard.\nOn Blackboard, pass us a link to your GitHub document on Blackboard for weekly assessments\nThis journal will count as both your weekly journal entry and your weekly workbook – double credits!\n\nHumanities scholars love footnotes.↩︎\n",
    "preview": "posts/1_1/Rlogo.png",
    "last_modified": "2021-02-23T17:44:16+13:00",
    "input_file": {},
    "preview_width": 724,
    "preview_height": 561
  },
  {
    "path": "posts/1_2/",
    "title": "R basics",
    "description": "Some fundamentals",
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      },
      {
        "name": "Johannes Karl",
        "url": "https://johannes-karl.com"
      }
    ],
    "date": "2021-02-23",
    "categories": [],
    "contents": "\n\nContents\nFundamentals of RUsing R as calculator\nThe basic structure of R commands\nRecommended reading\n\n\nFundamentals of R\nA consoleruns all your code in R\nA source page runs all your code in R.\nA working directory is where R will look for raw data and other material.\nIn R-studio, (for starters) you can can use the file tab to import and save your material.\nSimilarly, in R-studio, (for starters) you can can use install packages by clicking the Install tab in the package pane (generally lower right pane) to install packagees.\nUsing R as calculator\nWe can use R as a calculator. You can run any mathematical operation you would normally use by entering it into the console:\n\n\n## Addition\nx = 3 + 2\nx\n\n\n[1] 5\n\n## Subtraction\nx = 3 - 2\nx\n\n\n[1] 1\n\n## Multiplication\nx = 3 * 2\nx\n\n\n[1] 6\n\n## Division\nx = 3 / 2\nx\n\n\n[1] 1.5\n\n## Modulus (Remainder from division)\nx = 3 %% 2\nx\n\n\n[1] 1\n\n## Exponentiation\nx = 3 ^ 2\nx\n\n\n[1] 9\n\n## Integer Division (Number of times denominator fits in numerator)\nx = 3 %/% 2\nx\n\n\n[1] 1\n\nThe basic structure of R commands\nWhile using R as calculator might be interesting, it does not get us very far in analysing our data.\nTo really unlock the full potential of R we first need to understand the basic structure of most R code and learn some terms.\nThe four main elements of every R code are:\nobjects,\nfunctions,\narguments\noperators.\nFigure 1 provides a simple example, that produces a new object which contains the mean of variable x.\n\n\n\nFigure 1: The Basic Syntax of R\n\n\n\nThe function mean generates the arithmetic mean of an input object.\nThe object needs to be specified inside of the function brackets as the x argument, in this case we define x = df .\nLast, we assign the result of this function for later us via the <- operator to an object which we decided to call object.\nIn other words, we create a new object that can be further manipulated and contains information about the mean of a previously created object “x”. This structure represents the foundation of most operations in R.\nInstead calling the mean function as above one could manually add all values of x dividing it by the number of x values.\nNevertheless, this would be very cumbersome.\nFor this reason, functions (pre-assembled lines of code) exist to reduce the amount of coding necessary.\nThese functions can be bundled into packages. R’s capacity for creating packages is main appeal of R as a statistical tool because community developed functions are available from a central repository called CRAN in the form of packages.\nThese packages can be installed in R with the command install.packages(“package name”).\nIt is important that you only need to install a package once on your machine, expect if you want to upgrade the package. Generally speaking you regularly want to upgrade your packages, but keep a permanent note in your code which version of a package you used when it was initially written.\nRecommended reading\nAn introduction to R and Rstudio\n\n\n\n",
    "preview": {},
    "last_modified": "2021-02-19T18:35:55+13:00",
    "input_file": {}
  },
  {
    "path": "posts/1_3/",
    "title": "Set up",
    "description": "The purpose of this week is to get you set up to write in R markdown",
    "author": [
      {
        "name": "Joseph Bulbulia",
        "url": "https://josephbulbulia.netlify.app"
      },
      {
        "name": "Johannes Karl",
        "url": "https://johannes-karl.com"
      }
    ],
    "date": "2021-02-23",
    "categories": [],
    "contents": "\n\nContents\nTO DO\nMarkdown is a format for writing\nRmarkdown and You\nHow to keep track of everything\nSome useful sites\n\nTO DO\nRead Daniell Navarro’s brief account of Rmarkdown here\nMarkdown is a format for writing\nRmarkdown is a format for combing code with ordinary writing.\nThe Rmarkdown code we used to write the opening paragraph looks like this.\n\ndiv.blue{ background-color:#e6f0ff}\n\n## TO DO\nRead Danielle Navarro's brief account of \nRmarkdown [here](https://slides.djnavarro.net/starting-rmarkdown/#8)\n\nThe:\n\n##\n\nmakes a heading. We write as ordinary,\n\nRead Danielle Navarro’s brief account of Rmarkdown\n\nand we include a link by typing\n\n[here](https://slides.djnavarro.net/starting-rmarkdown/#8)\n\nThink of rmarkdown as writing in word but without having to use your mouse all the time. The really great thing about Rmarkdown is that you can write document and do the analysis in a single stop shop. Figure 1 shows Rmarkdown in the rconsole (upper left).\n\n\n\nFigure 1: Screenshot of Rmarkdown document (upper left)\n\n\n\nRmarkdown and You\nRmarkdown merges two very powerful ideas: 1. R as a coding based tool to make your analysis repeatable; 2. markdown an approach to writing text that allows for the direct embedding of code output.\nThis is an immensely powerful approach that can be used for everything, from writing research papers, to writing complex technical documentation. This website is written Rmarkdown.\nYou will be creating a website similar to Johannes Karl’swebsite and Joseph Bulbulia’s websiteand you will do this by written using Rmarkdown).\nYou might think that writing in R markdown is only a nice technical trick for people really into coding, but in reality it addresses a central problem of statistical analysis.\nThe majority of errors in quantitative research papers (some meta-researchers indiate values as high as 80%) are human errors in transcribing values from the statistical software they are using to the final document (for a marginally entertaining story around this issue see this post).\nHow to keep track of everything\nNow that we have our repeatable code, our repeatable document, the last thing we need is a transparent way to document what we are doing and share with others. For that we come to our last tool that in a similar confusing way to R and Rstudio is split in to parts; git and Github.\nSome useful sites\ncoding tips Rmarkdown website\n\n\n\n",
    "preview": {},
    "last_modified": "2021-02-19T18:36:56+13:00",
    "input_file": {}
  }
]
